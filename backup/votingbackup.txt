if(level === 3 && textArray[2] == '1') {
  const selectedCircleIndex = parseInt(textArray[1]) - 1;
  const userCircles = await Savings.find({ 'GroupMembers.MemberPhoneNumber': phoneNumber });
  const selectedCircle = userCircles[selectedCircleIndex];

  // const id = selectedCircle.LoanRequest.find((id) => id._id === id._id);
 
  try {
    const loanRequest = selectedCircle.LoanRequest.find((id) => id._id === id._id);
       
    if (!loanRequest) {
      response = `END Loan request not found.`;
      return response;
    }
  
    loanRequest.ApprovalVotes.push(phoneNumber);
    const totalApprovalVotes = loanRequest.ApprovalVotes.length;
    const totalGroupMembers = selectedCircle.GroupMembers.length;
  
    if (totalApprovalVotes >= totalGroupMembers) { // check if all group members have voted
      const loanRequest = selectedCircle.LoanRequest.find((id) => id._id === id._id);
      const loanAmount = loanRequest ? loanRequest.LoanAmount: 0;
      const borrowerIndex = selectedCircle.circleBalance.findIndex(
        (member) => member.MemberPhoneNumber === loanRequest.BorrowerNumber
      );
  
      console.log(borrowerIndex);

      if (borrowerIndex === -1) {
       
        response = `END Error: borrower not found in circle balance.`;
        return response;
      }
    

      if (selectedCircle.circleBalance[borrowerIndex].Balance < loanAmount) {
        response = `END Error: borrower does not have sufficient balance to repay loan.`;
        return response;
      }
  
      selectedCircle.circleBalance[borrowerIndex].Balance -= loanAmount;
      const borrower = await Wallet.findOneAndUpdate(
        { MemberPhoneNumber: loanRequest.BorrowerNumber },
        { $inc: { balance: loanAmount } },
        { new: true }
      );
  
      const loanBalance = {
        BorrowerNumber: loanRequest.BorrowerNumber,
        LoanAmount: loanAmount
      };
      selectedCircle.LoanBalance.push(loanBalance);
  
      const loanIndex = selectedCircle.LoanRequest.findIndex((id) => id._id === loanRequest._id);
      selectedCircle.LoanRequest.splice(loanIndex, 1); // remove the loan request from the array
    
      await selectedCircle.save();
  
      response = `END Loan request approved. You have received ${loanAmount} in your savings balance.`;
      return response;
    } else {
      await selectedCircle.save();
      response = `CON 
        ${selectedCircle.GroupName}
        1. Approve Request
        2. Reject Request
      `;
      return response;
    }
  } catch (error) {
    console.error(error);
    response = `END Error: ${error.message}`;
    return response;
  }
}

if(level === 3 && textArray[2] == 2) {
  const selectedCircleIndex = parseInt(textArray[1]) - 1;
  const userCircles = await Savings.find({ 'GroupMembers.MemberPhoneNumber': phoneNumber });
  const selectedCircle = userCircles[selectedCircleIndex];
  const loanRequest = selectedCircle.LoanRequest.find(lr => lr.MemberPhoneNumber === phoneNumber);
  
  if (loanRequest) {
    loanRequest.RejectionVotes.push(phoneNumber);
    const totalRejectionVotes = loanRequest.RejectionVotes.length;
    const totalGroupMembers = selectedCircle.GroupMembers.length;
    if (totalRejectionVotes >= totalGroupMembers / 2) {
      selectedCircle.LoanRequest = null;
      await selectedCircle.save();
      response = `END Loan request rejected.`;
      return response;
    } else {
      await selectedCircle.save();
      response = `END Loan request rejected. Total rejection votes: ${totalRejectionVotes}/${totalGroupMembers / 2}`;
      return response;
    }
  } else {
    response = `END Loan request not found.`;
    return response;
  }
}
